### - (0,5 pontos) Criar uma rota e implementação para busca de todos os funcionários (GET /funcionarios)
GET http://localhost:3000/funcionarios HTTP/1.1

### (0,5 pontos) Criar uma rota e implementação para busca de funcionário por identificador (GET /funcionarios/:id)
GET http://localhost:3000/funcionarios/1 HTTP/1.1

### - (1,0 pontos) Criar uma rota e implementação para cadastro de funcionário (POST /funcionarios)
POST http://localhost:3000/funcionarios HTTP/1.1
Content-Type: application/json

{
  "nome":"Krebimilson",
  "email":"QbH0N@example.com",
  "telefone":"123456789",
  "cargo":"DevSecOps",
  "salario":10000
}

### ADD 2
POST http://localhost:3000/funcionarios HTTP/1.1
Content-Type: application/json

{
  "nome":"Jabison",
  "email":"dpKq5@example.com",
  "telefone":"123456789",
  "cargo":"DevSecOps",
  "salario":10000
}

### - (1,0 pontos) Criar uma rota e implementação para atualização de funcionário (PUT /funcionarios/:id)
PUT http://localhost:3000/funcionarios/1 HTTP/1.1
Content-Type: application/json

{
  "nome":"Atualizado",
  "email":"atualizado@example.com",
  "telefone":"123456789",
  "cargo":"dev",
  "salario":10000
}

### - (0,5 pontos) Criar uma rota e implementação para exclusão de funcionário por identificador (DELETE /funcionarios/:id)
DELETE http://localhost:3000/funcionarios/1 HTTP/1.1



### - (0,5 pontos) Na busca de funcionário por identificador, em caso de funcionário não localizado, responder o status referente a NOT_FOUND (GET /funcionarios/:id)
GET http://localhost:3000/funcionarios/0 HTTP/1.1


###- (0,5 pontos) Na atualização de funcionário, em caso de funcionário não localizado, responder o status referente a NOT_FOUND (PUT /funcionarios/:id)
PUT http://localhost:3000/funcionarios/0 HTTP/1.1
Content-Type: application/json

{
  "nome":"Joaquim",
  "email":"QbH0N_Atualizado@example.com",
  "telefone":"123456789",
  "cargo":"Desenvolvedor",
  "salario":10000
}

### - (0,5 pontos) Na exclusão de funcionário por identificador, em caso de funcionário não localizado, responder o status referente a NOT_FOUND (DELETE /funcionarios/:id)
DELETE http://localhost:3000/funcionarios/0 HTTP/1.1


### - (0,75 pontos) No cadastro de funcionário, todos os campos são obrigatórios; caso não seja enviado um ou mais campos, responder o status referente a BAD_REQUEST (POST /funcionarios)
POST http://localhost:3000/funcionarios HTTP/1.1
Content-Type: application/json

{
  "nome":"Jae"
}

### - (0,75 pontos) Na atualização de funcionário, todos os campos são obrigatórios; caso não seja enviado um ou mais campos, responder o status referente a BAD_REQUEST (PUT /funcionarios/:id)
PUT http://localhost:3000/funcionarios/1 HTTP/1.1
Content-Type: application/json

{
  "nome":"Jae"
}

### - (0,5 pontos) Criar uma rota e implementação para busca de todos os funcionários do mesmo cargo (GET /funcionarios/cargo/:cargo)
GET http://localhost:3000/funcionarios/cargo/DevSecOps HTTP/1.1

### - (1,0 pontos) Criar uma rota e implementação para calcular e retornar a média salarial de todos os funcionários da lista (GET /funcionarios/salarios/media)

GET http://localhost:3000/funcionarios/salarios/media HTTP/1.1

