### - (0,5 pontos) Criar uma rota e implementação para busca de todos os livros (GET /livros)
GET http://localhost:3000/livro HTTP/1.1

### - (0,5 pontos) Criar uma rota e implementação para busca de livro por identificador (GET /livros/:id)
GET http://localhost:3000/livro/1 HTTP/1.1

### - (1,0 pontos) Criar uma rota e implementação para cadastro de livro (POST /livros)
POST http://localhost:3000/livro HTTP/1.1
Content-Type: application/json

{
  "titulo":"LivroTESTE1",
  "autor":"DevSecOps",
  "editora":"Desenvolvedora",
  "ano":2020,
  "preco":30.01
}

### ADD 2
POST http://localhost:3000/livro HTTP/1.1
Content-Type: application/json

{
  "titulo":"Livro TESTE2",
  "autor":"DevSecOps",
  "editora":"Desenvolvedora",
  "ano":2021,
  "preco":40.01
}

### - (1,0 pontos) Criar uma rota e implementação para atualização de livro (PUT /livros/:id)
PUT http://localhost:3000/livro/1 HTTP/1.1
Content-Type: application/json

{
  "titulo":"Livro ATUALIZADO",
  "autor":"Autor ATUALIZADO",
  "editora":"editora Atualizado",
  "ano":2020,
  "preco":35.01
}

### - (0,5 pontos) Criar uma rota e implementação para exclusão de livro por identificador (DELETE /livros/:id)
DELETE http://localhost:3000/livro/1 HTTP/1.1


### - (0,5 pontos) Na busca de livro por identificador, em caso de livro não encontrado, responder o status referente a NOT_FOUND (GET /livros/:id)
GET http://localhost:3000/livro/0 HTTP/1.1


### - (0,5 pontos) Na atualização de livro, em caso de livro não encontrado, responder o status referente a NOT_FOUND (PUT /livros/:id)
PUT http://localhost:3000/livro/0 HTTP/1.1
Content-Type: application/json

{
  "titulo":"Livro ATUALIZADO",
  "autor":"Autor ATUALIZADO",
  "editora":"editora Atualizado",
  "ano":2020,
  "preco":35.01
}

### - (0,5 pontos) Na exclusão de livro por identificador, em caso de livro não encontrado, responder o status referente a NOT_FOUND (DELETE /livros/:id)
DELETE http://localhost:3000/livro/0 HTTP/1.1


### - (0,75 pontos) No cadastro de livro, todos os campos são obrigatórios; caso não seja enviado um ou mais campos, responder o status referente a BAD_REQUEST (POST /livros)
POST http://localhost:3000/livro HTTP/1.1
Content-Type: application/json

{
  "nome":"Jae"
}

### - (0,75 pontos) Na atualização de livro, todos os campos são obrigatórios; caso não seja enviado um ou mais campos, responder o status referente a BAD_REQUEST (PUT /livros/:id)
PUT http://localhost:3000/livro/1 HTTP/1.1
Content-Type: application/json

{
  "nome":"Jae"
}

### - (0,5 pontos) Criar uma rota e implementação para busca de todos os livros do mesmo autor (GET /livros/autor/:autor)
GET http://localhost:3000/livro/autor/DevSecOps HTTP/1.1

### - (1,0 pontos) Criar uma rota e implementação para calcular e retornar o preço médio de todos os livros da lista (GET /livros/preco/media)
GET http://localhost:3000/livro/preco/media HTTP/1.1

